package com.welldo.web;

/**
 * web 基础
 *
 * 0. 关于HTTP协议的详细内容，请参考Mozilla开发者网站。 https://developer.mozilla.org/zh-CN/docs/Web/HTTP
 * 0. 如今，我们访问网站、使用App时，都是基于Browser/Server模式，简称BS架构
 *
 * 1.HTTP协议
 * 在Web应用中，浏览器请求（发送）一个URL，服务器就把生成的HTML网页发送给浏览器，浏览器和服务器之间的传输协议是HTTP
 *      HTML是一种用来定义网页的文本
 *      HTTP是在网络上传输HTML的协议，用于浏览器和服务器的通信。(是一个基于 TCP协议 的"请求-响应协议")
 *
 *
 * 1.1 协议区别
 * HTTP 协议运行在TCP之上，所有传输的内容都是明文;（默认端口80）
 * HTTPS 协议运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。（默认端口443）
 *      http ===> tcp
 *      https ===> SSL/TLS(加密解密) ===> tcp
 *
 * 1.2 运行步骤;
 * 在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，
 * 该连接是通过TCP协议与IP协议共同构建，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。
 * HTTP是比TCP更高层次的应用层协议，只有低层协议建立之后才能，才能进行更层协议的连接，
 * 因此，首先要建立TCP连接，一般TCP连接的端口号是80
 *
 * (ip层,是把数据分组从一台主机搬运到另一台主机,但是不可靠,丢包,重复,乱序.所以需要tcp来做可靠性的传输)
 *
 * 1.3 它是"无状态的", 无状态:是指协议没有记忆能力,也就是不会在两个请求之间保留任何数据
 *      第一次交互开始:
 *          客户端问:"1+1=?"
 *          服务端答:"2"
 *      第一次交互结束,开启第二次交互:
 *          客户端问:"你刚刚回答什么?"
 *          服务端答:"你刚刚问了什么?"
 *
 *
 * 2. 对于Browser来说，请求页面的流程如下：
 *     a.与服务器建立TCP连接；
 *     b.发送HTTP请求；
 *     c.收取HTTP响应，然后把网页在浏览器中显示出来。
 *    （请求和响应都由  Header 和 Body 构成）
 *
 * 2.1 浏览器发送的HTTP请求如下：
 * |--------------------------------------------------------------------------------------------------
 * | GET / HTTP/1.1                          (第一行表示使用GET请求,获取路径为/的资源，并使用HTTP/1.1协议)
 * |
 * | 从第二行开始，每行都是一个HTTP头(每行都以\r\n结束)，以 k:v 形式表示，
 * | 常见http头如下：
 * | Host: www.sina.com.cn                   (表示请求的主机名)
 * | User-Agent: Mozilla/5.0 xxx             (User-Agent: 标识客户端本身，例如Chrome的标识类似Mozilla/5.0 ... Chrome/79)
 * | Accept: ✳/✳                             (Accept：表示浏览器能接收的资源类型,如text/✳，image/✳，这里✳/✳表示所有)
 * | Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8（Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；）
 * | Accept-Encoding: gzip, deflate           (Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate, br。)
 * | cookie:...
 * | connection:...
 * |--------------------------------------------------------------------------------------------------
 * (HTTP Header每行都以 \r\n 结束。
 *
 * 2.2 服务器的响应如下：
 * |--------------------------------------------------------------------------------------------------
 * | HTTP/1.1 200 OK             (第一行: http版本号+空格+数字+空格+文本; 数字表示响应代码，给程序识别; 文本则是给开发者调试使用的。)
 * |
 * | 从第二行开始，每行都是一个HTTP头(每行都以\r\n结束)，以 k:v 形式表示，
 * | 常见http头如下：
 * | Content-Type: text/html      表示该响应内容的类型，例如text/html，image/jpeg；
 * | Content-Length: 21932        表示该响应内容的长度（字节数）；
 * | Content-Encoding: gzip       表示该响应压缩算法，例如gzip；
 * | Cache-Control: max-age=300   指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒。
 * | \r\n   (也就是说， 这个一个空行，空行标识Header和Body的分隔)
 * | <html>...网页数据...
 * |--------------------------------------------------------------------------------------------------
 * (HTTP Header每行都以 \r\n 结束。
 * 如果遇到两个连续的\r\n，也就是说，遇到了一个空行，那么后面就是HTTP Body。
 * 浏览器读取  Body，并根据Header信息中指示的Content-Type、Content-Encoding等解压后显示网页、图像或其他内容。
 * 通常浏览器获取的第一个资源是HTML网页，
 * 在网页中，如果嵌入了 js、CSS、图片、视频等，浏览器会根据资源的URL再次向服务器请求对应的资源)
 *
 *
 * 2.3 * 常见的响应代码有： *
 *      200 OK：表示成功；
 *      301 Moved Permanently：表示该URL已经永久重定向；
 *      302 Found：表示该URL需要临时重定向；
 *      304 Not Modified：表示该资源没有修改，客户端可以使用本地缓存的版本；
 *      400 Bad Request：表示客户端发送了一个错误的请求，例如参数无效；
 *      401 Unauthorized：表示客户端因为身份未验证而不允许访问该URL；
 *      403 Forbidden：表示服务器因为权限问题拒绝了客户端的请求；
 *      404 Not Found：表示客户端请求了一个不存在的资源；
 *      500 Internal Server Error：表示服务器处理时内部出错，例如因为无法连接数据库；
 *      503 Service Unavailable：表示服务器此刻暂时无法处理请求。
 *
 *
 * author:welldo
 * date: 2021-09-12 16:17
 */
public class A_2_HttpBase {
}
